AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template that creates all of the resources needed in the logarchive account to
  begin Deepwatch ingestion of logs via SQS-based-s3 ingestion (abp-1kirFQBF75MfEQ3RbMQHRb-5Qgs4qOsPgbXnTtlFjeTTo-ln8887cq)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Properties
        Parameters:
          - pCloudTrailBucketName
          - pGuardDutyBucketName
          - pGuardDutyQueueName
          - pCloudTrailQueueName
          - pDeepwatchRoleName

    ParameterLabels:
      pCloudTrailBucketName:
        default: The bucket where CloudTrail logs are stored
      pGuardDutyBucketName:
        default: The bucket where GuardDuty logs are stored
      pCloudTrailQueueName:
        default: The queue where CloudTrail log notifications go
      pGuardDutyQueueName:
        default: The queue where GuardDuty log notifications go
      pDeepwatchRoleName:
        default: The name given to the Deepwatch IAM role & policy

Parameters:
  pGuardDutyBucketName:
    Type: String
    Description: S3 bucket that store GuardDuty logs.
    AllowedPattern: '^([\w.-]{1,900})$|^(\/[\w.-]{1,900})*[\w.-]{1,900}$'
    ConstraintDescription:
      Must be alphanumeric or special characters [., _, -]. In addition, the slash character ( / ) used to delineate hierarchies in parameter names.
  pCloudTrailBucketName:
    Type: String
    Description: S3 bucket that stores CloudTrail logs.
    AllowedPattern: '^([\w.-]{1,900})$|^(\/[\w.-]{1,900})*[\w.-]{1,900}$'
    ConstraintDescription:
      Must be alphanumeric or special characters [., _, -]. In addition, the slash character ( / ) used to delineate hierarchies in parameter names.
  pGuardDutyQueueName:
    AllowedPattern: '^([\w.-]{1,900})$|^(\/[\w.-]{1,900})*[\w.-]{1,900}$'
    ConstraintDescription:
      Must be alphanumeric or special characters [., _, -]. In addition, the slash character ( / ) used to delineate hierarchies in parameter names.
    Default: deepwatch-guardduty-queue
    Description:
      The SQS queue that deepwatch will be monitoring for new GuardDuty log arrival
    Type: String
  pCloudTrailQueueName:
    AllowedPattern: '^([\w.-]{1,900})$|^(\/[\w.-]{1,900})*[\w.-]{1,900}$'
    ConstraintDescription:
      Must be alphanumeric or special characters [., _, -]. In addition, the slash character ( / ) used to delineate hierarchies in parameter names.
    Default: deepwatch-cloudtrail-queue
    Description:
      The SQS queue that deepwatch will be monitoring for new CloudTrail log arrival
    Type: String
  pDeepwatchRoleName:
    AllowedPattern: '^([\w.-]{1,900})$|^(\/[\w.-]{1,900})*[\w.-]{1,900}$'
    ConstraintDescription: 'Must be alphanumeric or special characters [., _, -].'
    Default: deepwatch-mdr-role
    Description: The name of the role that will be created to provide access to ingest logs
    Type: String

Resources:
  rGuardDutyDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_27
            comment: SQS queues are encrypted via the 'SqsManagedSseEnabled' property being set to 'True'
    Properties:
      QueueName: !Sub '${pGuardDutyQueueName}-dlq'
      VisibilityTimeout: 30
      SqsManagedSseEnabled: True

  rGuardDutyDeadLetterQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource: !GetAtt 
              - rGuardDutyDeadLetterQueue
              - Arn
            Principal: '*'
            Condition:
              ArnEquals:
                'aws:Sourcearn': !Sub 'arn:${AWS::Partition}:s3:::${pGuardDutyBucketName}'
      Queues:
        - !Ref rGuardDutyDeadLetterQueue
  
  rGuardDutyQueue:
    Type: 'AWS::SQS::Queue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_27
            comment: SQS queues are encrypted via the 'SqsManagedSseEnabled' property being set to 'True'
    Properties:
      QueueName: !Ref pGuardDutyQueueName
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 
          - rGuardDutyDeadLetterQueue
          - Arn
        maxReceiveCount: 5
      SqsManagedSseEnabled: True
  
  rGuardDutyQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F21
            reason: The condition alleviates any security risk by checking for a specific principal
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:SendMessage'
            Effect: Allow
            Resource: !GetAtt 
              - rGuardDutyQueue
              - Arn
            Principal: '*'
            Condition:
              ArnEquals:
                'aws:Sourcearn': !Sub 'arn:${AWS::Partition}:s3:::${pGuardDutyBucketName}'
      Queues:
        - !Ref rGuardDutyQueue

  rCloudTrailDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_27
            comment: SQS queues are encrypted via the 'SqsManagedSseEnabled' property being set to 'True'
    Properties:
      QueueName: !Sub '${pCloudTrailQueueName}-dlq'
      VisibilityTimeout: 30
      SqsManagedSseEnabled: True

  rCloudTrailDeadLetterQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource: !GetAtt 
              - rCloudTrailDeadLetterQueue
              - Arn
            Principal: '*'
            Condition:
              ArnEquals:
                'aws:Sourcearn': !Sub 'arn:${AWS::Partition}:s3:::${pGuardDutyBucketName}'
      Queues:
        - !Ref rCloudTrailDeadLetterQueue

  rCloudTrailQueue:
    Type: 'AWS::SQS::Queue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_27
            comment: SQS queues are encrypted via the 'SqsManagedSseEnabled' property being set to 'True'
    Properties:
      QueueName: !Ref pCloudTrailQueueName
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 
          - rCloudTrailDeadLetterQueue
          - Arn
        maxReceiveCount: 5
      SqsManagedSseEnabled: True

  rCloudTrailQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F21
            reason: The condition alleviates any security risk by checking for a specific principal
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'sqs:SendMessage'
            Effect: Allow
            Resource: !GetAtt 
              - rCloudTrailQueue
              - Arn
            Principal: '*'
            Condition:
              ArnEquals:
                'aws:Sourcearn': !Sub 'arn:${AWS::Partition}:s3:::${pCloudTrailBucketName}'
      Queues:
        - !Ref rCloudTrailQueue

  rCloudTrailPreProcessedDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_27
            comment: SQS queues are encrypted via the 'SqsManagedSseEnabled' property being set to 'True'
    Properties:
      QueueName: !Sub '${pCloudTrailBucketName}-preproc-dlq'
      VisibilityTimeout: 30
      SqsManagedSseEnabled: True

  rCloudTrailPreProcessedDeadLetterQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource: !GetAtt 
              - rCloudTrailPreProcessedDeadLetterQueue
              - Arn
            Principal: '*'
            Condition:
              ArnEquals:
                'aws:Sourcearn': !Sub 'arn:${AWS::Partition}:s3:::${pGuardDutyBucketName}'
      Queues:
        - !Ref rCloudTrailPreProcessedDeadLetterQueue

  rCloudTrailPreProcessedQueue:
    Type: 'AWS::SQS::Queue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W48
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_27
            comment: SQS queues are encrypted via the 'SqsManagedSseEnabled' property being set to 'True'
    Properties:
      QueueName: !Sub '${pCloudTrailBucketName}-preproc'
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 
          - rCloudTrailPreProcessedDeadLetterQueue
          - Arn
        maxReceiveCount: 5
      SqsManagedSseEnabled: True

  rCloudTrailPreProcessedQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F21
            reason: The condition alleviates any security risk by checking for a specific principal
    Properties:
      PolicyDocument:
        Statement:
          - 
            Action: 'sqs:SendMessage'
            Effect: Allow
            Resource: !GetAtt 
              - rCloudTrailPreProcessedQueue
              - Arn
            Principal: '*'
            Condition:
              ArnLike:
                aws:SourceArn: !Ref rOrgLevelLogsSNSTopic
          - 
            Action: 'sqs:*'
            Effect: Allow
            Resource: !GetAtt 
              - rCloudTrailPreProcessedQueue
              - Arn
            Principal: 
              AWS:
                !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
      Queues:
        - !Ref rCloudTrailPreProcessedQueue

  rOrgLevelLogsSNSTopic:
    Type: 'AWS::SNS::Topic'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
      checkov:
        skip:
          - id: CKV_AWS_26
            comment: SNS topics cannot use Amazon-managed SSE keys, KMS keys have caused issues for us in the past
    Properties:      
      TopicName: 'deepwatch-org-level-logs-preprocessed'

  rOrgLevelLogsSNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'SNS:Publish'
            Effect: Allow
            Resource: !Ref rOrgLevelLogsSNSTopic
            Principal: 
              Service: 's3.amazonaws.com'
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:${AWS::Partition}:s3:::${pCloudTrailBucketName}'
      Topics:
        - !Ref rOrgLevelLogsSNSTopic

  rCloudTrailSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref rOrgLevelLogsSNSTopic
      Endpoint: !GetAtt rCloudTrailPreProcessedQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true

  rCloudTrailPreProcessedLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
          - id: CKV_AWS_173
            comment: Environment variables are not sensitive.
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          
          def lambda_handler(event, context):
              sqs_client=boto3.client('sqs')
              sqs_records=event["Records"]
          
              for record in sqs_records:
                  body=json.loads(record['body'])
                  s3_objects=body["Records"]
          
                  for object in s3_objects:
                      object_key=object["s3"]["object"]["key"]
                      
                      log_type=object_key.split('/')
          
                      if (log_type[3] == "CloudTrail"):
                          print('Forwarding logs to queue for Deepwatch consumption')
                          sqs_queue_url = os.environ['cloudtrail_queue_url']
                          sqs_client.send_message(QueueUrl=sqs_queue_url, MessageBody=(json.dumps(body)))
                      else:
                          print('Did not recognize log type as a valid log ingested by the Deepwatch solution.')

      Handler: index.lambda_handler
      Role: !GetAtt 
        - rCloudTrailPreProcessedLambdaIAMRole
        - Arn
      Runtime: python3.9
      Timeout: 5
      Environment:
        Variables:
          cloudtrail_queue_url: !Ref rCloudTrailQueue

  rCloudTrailPreProcessedLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Wildcards with list actions are necessary, as well as with unknown loggroup naming
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudTrailPreProcessedLambdaIAMRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'SQS:ReceiveMessage'
                  - 'SQS:DeleteMessage'
                  - 'SQS:GetQueueAttributes'
                  - 'SQS:ChangeMessageVisibility'
                Resource: !GetAtt 
                  - rCloudTrailPreProcessedQueue
                  - Arn
              - Effect: Allow
                Action:
                  - 'SQS:ReceiveMessage'
                  - 'SQS:DeleteMessage'
                  - 'SQS:GetQueueAttributes'
                  - 'SQS:SendMessage'
                  - 'SQS:SendMessageBatch'
                Resource: !GetAtt 
                  - rCloudTrailQueue
                  - Arn
              - Effect: Allow
                Action: 'SQS:ListQueues'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'

  rCloudTrailPreProcessedLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - rCloudTrailPreProcessedLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:${AWS::Partition}:sqs:::${rCloudTrailPreProcessedQueue}'

  rCloudTrailPreProcessedLambdaFunctionEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt 
        - rCloudTrailPreProcessedQueue
        - Arn
      FunctionName: !GetAtt 
        - rCloudTrailPreProcessedLambdaFunction
        - Arn

  rCustomResourceLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CustomResourceLambdaIAMRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${pGuardDutyBucketName}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${pCloudTrailBucketName}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'

  rCreateS3NotifLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
          - id: CKV_AWS_173
            comment: Environment variables are not sensitive.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - rCustomResourceLambdaIAMRole
        - Arn
      Code:
        ZipFile: |

          from __future__ import print_function
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      GuardDutyBucket=event['ResourceProperties']['GuardDutyBucket']
                      CloudTrailBucket=event['ResourceProperties']['CloudTrailBucket']
                      delete_notification(GuardDutyBucket)
                      delete_notification(CloudTrailBucket)
                      responseData={'GuardDutyBucket':GuardDutyBucket,'CloudTrailBucket':CloudTrailBucket}
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      GuardDutyQueueArn=event['ResourceProperties']['GuardDutyQueueArn']
                      OrgLevelSNSTopicArn=event['ResourceProperties']['OrgLevelSNSTopicArn']
                      GuardDutyBucket=event['ResourceProperties']['GuardDutyBucket']
                      CloudTrailBucket=event['ResourceProperties']['CloudTrailBucket']
                      add_notification(GuardDutyQueueArn, GuardDutyBucket, 'SQS')
                      add_notification(OrgLevelSNSTopicArn, CloudTrailBucket, 'SNS')
                      responseData={'GuardDutyBucket':GuardDutyBucket,'CloudTrailBucket':CloudTrailBucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': 'Something bad happened.'}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(DestinationArn, Bucket, DestinationType):
              if DestinationType == 'SQS':
                  bucket_notification = s3.BucketNotification(Bucket)
                  response = bucket_notification.put(
                    NotificationConfiguration={
                      'QueueConfigurations': [
                        {
                            'Id': 'deepwatch-logs-notification',
                            'QueueArn': DestinationArn,
                            'Events': [
                                's3:ObjectCreated:*'
                            ]
                        }
                      ]
                    }
                  )
              elif DestinationType == "SNS":
                  bucket_notification = s3.BucketNotification(Bucket)
                  response = bucket_notification.put(
                    NotificationConfiguration={
                      'TopicConfigurations': [
                        {
                            'Id': 'deepwatch-logs-notification',
                            'TopicArn': DestinationArn,
                            'Events': [
                                's3:ObjectCreated:*'
                            ]
                        }
                      ]
                    }
                  )
            
          def delete_notification(Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                  NotificationConfiguration={}
              )
              print("Delete request completed....")
      Runtime: python3.9
      Timeout: 50

  rLambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    Properties:
      ServiceToken: !GetAtt 
        - rCreateS3NotifLambdaFunction
        - Arn
      GuardDutyQueueArn: !GetAtt 
        - rGuardDutyQueue
        - Arn
      OrgLevelSNSTopicArn: !Ref rOrgLevelLogsSNSTopic
      GuardDutyBucket: !Ref pGuardDutyBucketName
      CloudTrailBucket: !Ref pCloudTrailBucketName

  rDeepwatchPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: This resource should not be replacable. The name is set by the user in the root stack.
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:GetQueueAttributes'
              - 'sqs:ListQueues'
              - 'sqs:ReceiveMessage'
              - 'sqs:GetQueueUrl'
              - 'sqs:SendMessage'
              - 'sqs:DeleteMessage'
            Resource:
              - !GetAtt [rCloudTrailQueue, Arn]
              - !GetAtt [rGuardDutyQueue, Arn]
          - Effect: Allow
            Action:
              - 's3:ListBucket'
              - 's3:GetObject'
              - 's3:GetBucketLocation'
              - 's3:ListAllMyBuckets'
              - 's3:GetBucketTagging'
              - 's3:GetAccelerateConfiguration'
              - 's3:GetBucketLogging'
              - 's3:GetLifecycleConfiguration'
              - 's3:GetBucketCORS'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${pGuardDutyBucketName}'
              - !Sub 'arn:${AWS::Partition}:s3:::${pCloudTrailBucketName}'
      ManagedPolicyName: !Ref pDeepwatchRoleName

  rDeepwatchRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: This resource should not be replacable. The name is set by the user in the root stack.
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::975402726461:role/deepwatch-temp-role'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref rDeepwatchPolicy
      Path: /
      RoleName: !Ref pDeepwatchRoleName

Outputs:
  oCloudTrailQueueArn:
    Description: The Arn of the SQS queue for CloudTrail log ingestion, supply to Deepwatch onboarding engineer
    Value: !GetAtt [rCloudTrailQueue, Arn]
  oGuardDutyQueueArn:
    Description: The Arn of the SQS queue for GuardDuty log ingestion, supply to Deepwatch onboarding engineer
    Value: !GetAtt [rGuardDutyQueue, Arn]
  oDeepwatchRoleArn:
    Description: The Arn of the IAM Role for Deepwatch log ingestion, supply to Deepwatch onboarding engineer
    Value: !GetAtt [rDeepwatchRole, Arn]
